----------------------------------------------------------------------------------------------------
    Conditional rendering
----------------------------------------------------------------------------------------------------
+ Conditional rendering in React works the same way conditions work in JavaScript. So we can use:
    - If statement
    - && operator
    - Ternary expression

+ Example:
    import React, {Component} from 'react';
    class classComponent extends Component { 
        state = {
            showUser: true
        }
        tongle = () => {
            this.setState({
                showUser: !this.state.showUser
            })
        }
        render () {
            let user;
            if (this.state.showUser) {
                user = (<p>I am user</p>);
            }
            
            return (
                <div>
                    <button onClick={this.tongle}> Show/Hide </button>
                    {/* // Recommend way */}
                    {user}
                    {/* // Ternary expression */}
                    {this.state.showUser ? <p>True ternary</p> : <p> False ternary</p>}
                    {/* // And operator */}
                    {this.state.showUser && <p>And operator condition</p>}
                </div>
            )
        } 
    }
    export default classComponent;


----------------------------------------------------------------------------------------------------
    List rendering
----------------------------------------------------------------------------------------------------
+ Rendering multiple components using any JavaScript loop function.

+ Key attribute should be provided when creating lists of elements, it help React identify which
items have changed, are added, or are removed. Keys used within arrays should be unique among their
siblings, however they donâ€™t need to be globally unique.

+ Example:
    // Child Component
    function NumberList(props) {
        const numbers = props.numbers;
        const listItems = numbers.map((number) =>
            <li key={number.toString()}>
                {number}
            </li>
        );
        return (
            <ul>{listItems}</ul>
        );
    }

    // Parent component
    import React, {Component} from 'react';
    class classComponent extends Component {
        const numbers = [1, 2, 3, 4, 5];
        render () {
            <NumberList numbers={numbers} />
        }