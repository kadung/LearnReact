Ref:
    - 

----------------------------------------------------------------------------------------------------
    Introducing JSX
----------------------------------------------------------------------------------------------------
+ React embraces the fact that rendering logic is inherently coupled with other UI logic: how events
are handled, how the state changes over time, and how the data is prepared for display.

+ JSX stands for JavaScript XML, it is a syntax extension to JavaScript. It converts HTML tags into
react elements which allows us to write HTML elements in JavaScript without any createElement() and
appendChild() methods (render them to DOM).

+ JSX is NOT HTML but it looks a lot like it. Differences can be seen when looking closely though
(for example className in JSX vs class in "normal HTML"). 


----------------------------------------------------------------------------------------------------
    Component in React
----------------------------------------------------------------------------------------------------
+ Components are the core building block of React apps, they let you split the UI into independent,
reusable pieces, and think about each piece in isolation.

+ A typical React app could be depicted as a component tree - having one root component ("App") and
then an potentially infinite amount of nested child components.

+ Each component needs to return/ render some JSX code which React will render it to HTML code to
the real DOM in the end.

+ There are 2 ways to create component in React:
    - Functional components: also referred as "presentational", "dumb" or "stateless" components
        import React from 'react';
        const functionalComponent = () => { 
            return (
                <div>Hi there</div>
                <div>I am functional component</div>
            )
        }
        export default functionalComponent;
    
    - Class-based components: also referred as "containers", "smart" or "stateful" components
        import React, {Component} from 'react';
        class classComponent extends Component { 
            render () { 
                return (
                    <div>Hi there</div>
                    <div>I am class component</div> 
                )
            } 
        }
        export default classComponent;


----------------------------------------------------------------------------------------------------
    String interpolation
----------------------------------------------------------------------------------------------------
+ Sting interpolation allows the user to bind a dynamic value to a UI element. Interpolation is 
identified with an expression in the middle of curly brace.
    import React from 'react';
        const name = 'Danny';
        const functionalComponent = () => { 
            return (
                <div>Hi there, I am { name }</div>
                <div>Your number is { Math.random() } </div>
            )
        }
    export default functionalComponent;
 

----------------------------------------------------------------------------------------------------
    Handling Events with Methods
----------------------------------------------------------------------------------------------------
+ Handling events with React is similar to handling events on DOM elements. There are some syntactic
differences:
    - React events are named using camelCase, rather than lowercase.
    - With JSX you pass a function as the event handler, rather than a string.
    - Example:
        const functionalComponent = () => { 
            printLog = () => {
                console.log("Printing log");
            }

            return (
                // event handler in React
                <button onClick={printLog}>
                    Print console log
                </button>
            )
        }
        
+ List of supported events here: https://reactjs.org/docs/events.html#supported-events


----------------------------------------------------------------------------------------------------
    Component state
----------------------------------------------------------------------------------------------------
+ React components has a built-in state object, the state object is where you store property values
that belongs to the component. When the state of a component is changed, react will re-renders the
component.

+ Only class-based components can define and use state object:
    class NewPost extends Component { 
        state = {
            name: 'Dung'
        };

        changeName = () => {
            // setState() will merge its new object to original state object
            this.setState({
                name: 'Chilli'
            })
        }
 
        render () {
            return (
                <div>{this.state.counter}</div>
                <button onClick={changeName}>Change Name</button>
            );
        }
    }


----------------------------------------------------------------------------------------------------
    Parent component interacts with child component
----------------------------------------------------------------------------------------------------
+ Child component can receive data from parent component via:
    - Component attributes
    - Content projection

+ Child component can access received data via props object (short for “properties”). Props is read
only object so whether you declare a component as a function or a class, it must never modify its
own props (All React components must act like pure functions).

+ Example:
    // Parent component
    import React, {Component} from 'react';
    import functionalPerson from 'functionalPersonFile";
    import classPerson from 'classPersonFile";
    class App extends Component {
        state = {
            name: 'Dung',
            age: '30'
        };

        changeName = (newName) => {
            this.setState({
                name: newName
            })
        }

        childChangeNameHandler = (event) => {
            this.setState({
                name: event.target.value
            })
        }

        render () { 
            return (
                <Person 
                    // Pass datas to child
                    name={this.state.name} age={this.state.age} 
                    // Pass an action to child
                    click={this.changeName.bind(this, Chilli)} />
            )
        }
    export default App;

    // Child component
    const functionalPerson = (props) => { 
        return (
            <div>
                // {props.name}  => {this.props.name} if child component is class based
                <p>Hi {props.name}, your age is {props.age}</p>

                // Child property (content projection)
                // It will display: This is content projection text
                <p>{props.children}</p>

                // Passing method references between components
                <button onClick={props.click}>

                 // Pass data back to parent component
                 <input type="text" value={props.name}
                    onChange={props.childChangeNameHandler}/>
            </div>
        )
    }


----------------------------------------------------------------------------------------------------
    Add styles
----------------------------------------------------------------------------------------------------
+ Use stylesheet:
    // highlight.css
    .highlight {
        text-align: center;
        color: red;
    }

    // Component file
    import React from 'react';
    import './highlight.css';
    const functionalComponent = () => { 
        return (
            <div class="highlight">Hi there</div>
        )
    }
    export default functionalComponent;

+ In-line styles:
    import React from 'react';
    const functionalComponent = () => { 
        const highlight = {
            text-align: center;
             color: red;
        }
        return (
            <div style={style}>Hi there</div>
        )
    }
    export default functionalComponent;